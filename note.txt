Design Pattern:
Design patterrns in Software Engineering are some useful methods, developer
use to solve the frequently occuring problems in software developing.

We can devide them in following group.
Creational Pattern: Singleton, Factory, Builder.
Behavioral Pattern: Strategy, Observer.
Structural Pattern: Decorator, Facade.

Singleton: Suppose we want to make a logger for the whole project that
will be used by all objects to log messages or errors. So, all the object
must use the same instance of logger. Here the singleton pattern helps
to make sure that only one object can be created of the log object.

Factory: Suppose there are different types of user a system, if we use 
factory pattern it will hide the complex creation logic and provide
a common interface for creating multiple types of user.

Builder: This helps to create a object creation intereface that will
create a base object then provide the customisation option and finally
build object.

Strategy: This pattern helps to switch between defferent algorithm
dynamicaly without knowing the complexities of those algorithm.

Observer: This pattern helps to subscribe or unsubscribe an observer(a type of object)
by different observees (other type of objects). If there is any chage in the
observer, the observer can notify the subscribed objects. It makes one to many relationship
between the objects.

Decorator: If we need to add more functionalies to a object without affecting the
the other object created from the same class, we can use decorator pattern.

Facade: Provides a simplified interface to the client for multiple sub-systems.
For example we can make a simplified Api Call function for all types of api calling
rather than making multiple function for making different types of api call. 